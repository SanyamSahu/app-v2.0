{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/app-v2.0/src/lib/db.ts"],"sourcesContent":["\r\nif (typeof window !== \"undefined\") {\r\n  throw new Error(\"src/lib/db.ts cannot be imported from client-side code!\");\r\n}\r\n\r\nimport mysql from 'mysql2/promise';\r\n\r\n// Database connection configuration\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  port: parseInt(process.env.DB_PORT || '3306'),\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '1234',\r\n  database: process.env.DB_NAME || 'AccountDB',\r\n};\r\n\r\n// Create a connection pool\r\nconst pool = mysql.createPool({\r\n  ...dbConfig,\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\n// Utility function to execute queries\r\nexport async function query<T>(sql: string, params?: any[]): Promise<T> {\r\n  try {\r\n    const [rows] = await pool.execute(sql, params);\r\n    return rows as T;\r\n  } catch (error) {\r\n    console.error('Database query error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Utility function to get a single row\r\nexport async function getOne<T>(sql: string, params?: any[]): Promise<T | null> {\r\n  try {\r\n    const rows = await query<T[]>(sql, params);\r\n    return rows[0] || null;\r\n  } catch (error) {\r\n    console.error('Database getOne error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Test the database connection\r\nexport async function testConnection(): Promise<boolean> {\r\n  try {\r\n    await pool.getConnection();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Database connection error:', error);\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAKA;AAJA,uCAAmC;;AAEnC;;AAIA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEA,2BAA2B;AAC3B,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,GAAG,QAAQ;IACX,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;AAGO,eAAe,MAAS,GAAW,EAAE,MAAc;IACxD,IAAI;QACF,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAAC,KAAK;QACvC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM;IACR;AACF;AAGO,eAAe,OAAU,GAAW,EAAE,MAAc;IACzD,IAAI;QACF,MAAM,OAAO,MAAM,MAAW,KAAK;QACnC,OAAO,IAAI,CAAC,EAAE,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,KAAK,aAAa;QACxB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/app-v2.0/src/app/api/upload-users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { query } from '@/lib/db';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const formData = await req.formData();\r\n  const file: File | null = formData.get('file') as File;\r\n\r\n  if (!file) return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\r\n\r\n  const text = await file.text();\r\n  const lines = text.split('\\n').map(l => l.trim()).filter(Boolean);\r\n\r\n  const headers = lines[0].split(',').map(h => h.trim());\r\n  const expectedFields = ['id', 'username', 'password', 'role', 'name', 'email', 'contact', 'address'];\r\n\r\n  // Check for missing/extra headers\r\n  if (headers.length !== expectedFields.length || !expectedFields.every(f => headers.includes(f))) {\r\n    return NextResponse.json({ error: 'Invalid CSV headers' }, { status: 400 });\r\n  }\r\n\r\n  const users = lines.slice(1).map((line, index) => {\r\n    const values = line.split(',').map(v => v.trim());\r\n    return { lineNumber: index + 2, data: Object.fromEntries(headers.map((h, i) => [h, values[i]])) };\r\n  });\r\n\r\n  const malformed: number[] = [];\r\n  let inserted = 0;\r\n\r\n  for (const { lineNumber, data } of users) {\r\n    const hasMissingRequired = ['id', 'username', 'password', 'role', 'name', 'email'].some(key => !data[key]);\r\n\r\n    if (hasMissingRequired) {\r\n      malformed.push(lineNumber);\r\n      continue;\r\n    }\r\n\r\n    try {\r\n      await query(`\r\n        INSERT INTO user_login_credentials (id, username, password, role)\r\n        VALUES (?, ?, ?, ?)\r\n      `, [data.id, data.username, data.password, data.role]);\r\n\r\n      await query(`\r\n        INSERT INTO user_details (id, name, email, contact, address, accounts)\r\n        VALUES (?, ?, ?, ?, ?, ?)\r\n      `, [data.id, data.name, data.email, data.contact, data.address, JSON.stringify([])]);\r\n\r\n      inserted++;\r\n    } catch (err) {\r\n      malformed.push(lineNumber); // duplicate ID or SQL error\r\n    }\r\n  }\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    inserted,\r\n    skipped: malformed.length,\r\n    malformedLines: malformed\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,WAAW,MAAM,IAAI,QAAQ;IACnC,MAAM,OAAoB,SAAS,GAAG,CAAC;IAEvC,IAAI,CAAC,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAmB,GAAG;QAAE,QAAQ;IAAI;IAEjF,MAAM,OAAO,MAAM,KAAK,IAAI;IAC5B,MAAM,QAAQ,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,IAAI,MAAM,CAAC;IAEzD,MAAM,UAAU,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;IACnD,MAAM,iBAAiB;QAAC;QAAM;QAAY;QAAY;QAAQ;QAAQ;QAAS;QAAW;KAAU;IAEpG,kCAAkC;IAClC,IAAI,QAAQ,MAAM,KAAK,eAAe,MAAM,IAAI,CAAC,eAAe,KAAK,CAAC,CAAA,IAAK,QAAQ,QAAQ,CAAC,KAAK;QAC/F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,QAAQ,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM;QACtC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;QAC9C,OAAO;YAAE,YAAY,QAAQ;YAAG,MAAM,OAAO,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAM;oBAAC;oBAAG,MAAM,CAAC,EAAE;iBAAC;QAAG;IAClG;IAEA,MAAM,YAAsB,EAAE;IAC9B,IAAI,WAAW;IAEf,KAAK,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,MAAO;QACxC,MAAM,qBAAqB;YAAC;YAAM;YAAY;YAAY;YAAQ;YAAQ;SAAQ,CAAC,IAAI,CAAC,CAAA,MAAO,CAAC,IAAI,CAAC,IAAI;QAEzG,IAAI,oBAAoB;YACtB,UAAU,IAAI,CAAC;YACf;QACF;QAEA,IAAI;YACF,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,CAAC;;;MAGb,CAAC,EAAE;gBAAC,KAAK,EAAE;gBAAE,KAAK,QAAQ;gBAAE,KAAK,QAAQ;gBAAE,KAAK,IAAI;aAAC;YAErD,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,CAAC;;;MAGb,CAAC,EAAE;gBAAC,KAAK,EAAE;gBAAE,KAAK,IAAI;gBAAE,KAAK,KAAK;gBAAE,KAAK,OAAO;gBAAE,KAAK,OAAO;gBAAE,KAAK,SAAS,CAAC,EAAE;aAAE;YAEnF;QACF,EAAE,OAAO,KAAK;YACZ,UAAU,IAAI,CAAC,aAAa,4BAA4B;QAC1D;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT;QACA,SAAS,UAAU,MAAM;QACzB,gBAAgB;IAClB;AACF","debugId":null}}]
}