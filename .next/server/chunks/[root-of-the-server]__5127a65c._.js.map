{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/app-v2.0/src/lib/db.ts"],"sourcesContent":["\r\nif (typeof window !== \"undefined\") {\r\n  throw new Error(\"src/lib/db.ts cannot be imported from client-side code!\");\r\n}\r\n\r\nimport mysql from 'mysql2/promise';\r\n\r\n// Database connection configuration\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  port: parseInt(process.env.DB_PORT || '3306'),\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '1234',\r\n  database: process.env.DB_NAME || 'AccountDB',\r\n};\r\n\r\n// Create a connection pool\r\nconst pool = mysql.createPool({\r\n  ...dbConfig,\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\n// Utility function to execute queries\r\nexport async function query<T>(sql: string, params?: any[]): Promise<T> {\r\n  try {\r\n    const [rows] = await pool.execute(sql, params);\r\n    return rows as T;\r\n  } catch (error) {\r\n    console.error('Database query error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Utility function to get a single row\r\nexport async function getOne<T>(sql: string, params?: any[]): Promise<T | null> {\r\n  try {\r\n    const rows = await query<T[]>(sql, params);\r\n    return rows[0] || null;\r\n  } catch (error) {\r\n    console.error('Database getOne error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Test the database connection\r\nexport async function testConnection(): Promise<boolean> {\r\n  try {\r\n    await pool.getConnection();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Database connection error:', error);\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAKA;AAJA,uCAAmC;;AAEnC;;AAIA,oCAAoC;AACpC,MAAM,WAAW;IACf,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEA,2BAA2B;AAC3B,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,GAAG,QAAQ;IACX,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;AAGO,eAAe,MAAS,GAAW,EAAE,MAAc;IACxD,IAAI;QACF,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAAC,KAAK;QACvC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM;IACR;AACF;AAGO,eAAe,OAAU,GAAW,EAAE,MAAc;IACzD,IAAI;QACF,MAAM,OAAO,MAAM,MAAW,KAAK;QACnC,OAAO,IAAI,CAAC,EAAE,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,KAAK,aAAa;QACxB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/app-v2.0/src/app/api/users/route.ts"],"sourcesContent":["// src/app/api/users/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport { query } from '@/lib/db';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const users = await query<any[]>(`\r\n      SELECT \r\n        c.id, c.username, c.role,\r\n        d.name, d.email, d.contact, d.address, d.accounts\r\n      FROM user_login_credentials c\r\n      LEFT JOIN user_details d ON c.id = d.id\r\n    `);\r\n    return NextResponse.json(users);\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    return NextResponse.json({ message: 'Database error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  const { id, username, password, role, name, email, contact, address } = await req.json();\r\n\r\n  try {\r\n    await query(`\r\n      INSERT INTO user_login_credentials (id, username, password, role)\r\n      VALUES (?, ?, ?, ?)\r\n    `, [id, username, password, role]);\r\n\r\n    await query(`\r\n      INSERT INTO user_details (id, name, email, contact, address, accounts)\r\n      VALUES (?, ?, ?, ?, ?, ?)\r\n    `, [id, name, email, contact || null, address || null, JSON.stringify([])]);\r\n\r\n    return NextResponse.json({ message: 'User created successfully' }, { status: 201 });\r\n  } catch (err) {\r\n    console.error('User creation error:', err);\r\n    return NextResponse.json({ message: 'Failed to create user' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;;AAC7B;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAS,CAAC;;;;;;IAMlC,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;IAEtF,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,CAAC;;;IAGb,CAAC,EAAE;YAAC;YAAI;YAAU;YAAU;SAAK;QAEjC,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,CAAC;;;IAGb,CAAC,EAAE;YAAC;YAAI;YAAM;YAAO,WAAW;YAAM,WAAW;YAAM,KAAK,SAAS,CAAC,EAAE;SAAE;QAE1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}